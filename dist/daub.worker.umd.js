!function(e){"function"==typeof define&&define.amd?define(e):e()}(function(){"use strict";function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function n(e){return null==e?"":String(e)}function a(e){let t=e.toString();return t=(t=t.replace(/^\//,"")).replace(/\/[mgiy]*$/,"")}function r(e){return String(e).replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")}function s(e,t,s){let o="";if("function"!=typeof s){let e=new p(s);s=t=>e.evaluate(t)}if(t.flags&&t.flags.indexOf("g")>-1?t=function(e){let t=e.flags.replace("g","");return new RegExp(a(e),t)}(t):"string"==typeof t&&(t=r(t)),!t)return(s=s(""))+e.split("").join(s)+s;for(;e.length>0;){let a=e.length,r=e.match(t);if(r){let t,p=s(r,e);if(Array.isArray(p)&&([p,t]=p),o+=e.slice(0,r.index),o+=n(p),(e=void 0!==t?e.slice(r.index+t):e.slice(r.index+r[0].length)).length===a)throw new Error("Infinite loop detected; none of the string was consumed.")}else o+=e,e=""}return o}class p{constructor(e,t){this.template=String(e),this.pattern=t||p.DEFAULT_PATTERN}evaluate(e){return s(this.template,this.pattern,t=>{if(null==e)return"";let a=t[1]||"";if("\\"==a)return t[2];let r=e,s=t[3],p=/^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;if(null==(t=p.exec(s)))return a;for(;null!=t;){if(null==(r=r["["===t[1].charAt(0)?t[2].replace(/\\]/,"]"):t[1]])||""===t[3])break;s=s.substring("["===t[3]?t[1].length:t[0].length),t=p.exec(s)}return a+n(r)})}}function o(e,t){return 0!==t&&"\\"===e.charAt(t-1)}function i(e){let t=-1;do{t=e.indexOf("#",t+1)}while(t>-1&&o(e,t));return t>-1&&(e=e.substring(0,t)),e=e.trim()}p.DEFAULT_PATTERN=/(^|.|\r|\n)(#\{(.*?)\})/,p.interpolate=function(e,t){return new p(e).evaluate(t)};var l=function(e){let t=e.raw[0].split(/\n/).map(i).join("").replace(/\s/g,"");return t=t.replace(/(\\)(\\)(\d+)/g,(e,t,n,a)=>"".concat(n).concat(a)),new RegExp(t)};function c(e,t){return e?'<span class="'.concat(t,'">').concat(e,"</span>"):""}var u=Object.freeze({balance:function(e,t,n){let a,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};r=Object.assign({startIndex:0,stackDepth:0,considerEscapes:!0},r);let{startIndex:s,stackDepth:p,considerEscapes:o}=r,i=t.length,l=n.length,c=e.length;for(let r=s;r<c;r++){r>0&&(a=e.slice(r-1,r));let s=!!o&&"\\"===a,c=e.slice(r,r+i);if(e.slice(r,r+l)!==n||s||p++,c===t&&!s&&0===--p)return r}return-1},balanceByLexer:function(e,t){let n=function e(t){for(let n=t.length-1;n>=0;n--){let a=t[n];if("string"!=typeof a)return Array.isArray(a.content)?e(a.content):a}return null}(t.run(e).tokens);return n.index+n.content.length-1},compact:function(e){return e=(e=e.replace(/^[\s\t]*/gm,"")).replace(/\n/g,"")},escapeRegExp:r,flattenTokens:function(e){let t=[];return function e(n){n.forEach(n=>{t.push(n),Array.isArray(n.content)&&e(n.content)})}(e),t},gsub:s,regExpToString:a,wrap:c,VerboseRegExp:l});class d extends Error{constructor(e){super(e),this.name="ParseError"}}class m{constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"!=typeof e||t?(this.name=e,this.names=[e,...n.alias||[]],this._classNamePattern=new RegExp("\\b(?:"+this.names.join("|")+")\\b")):(this.name=null,n=t||n,t=e),this.options=n,this.rules=[],this._originalRules=t,this.extend(t),this.name&&this.names.forEach(e=>{console.log("REGISTERING:",e,this),m.register(e,this)})}_toObject(){return function(n){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?t(r,!0).forEach(function(t){e(n,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):t(r).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))})}return n}({},this._originalRules)}parse(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=this.pattern;return n.lastIndex=0,n.test(e)?s(e,n,(e,a)=>{let r,s,p,o=0,i=1;for(;r=this.rules[o++];){if(!e[i]){i+=r.length;continue}if(r.index&&((p=r.index(e[0],t))<=0&&(p=void 0),void 0!==p&&(s=p+1,a=a.slice(0,e.index+s),!(e=n.exec(a))||!e[i]))){let t=new d('Bad "index" callback; requested substring did not match original rule.');throw Object.assign(t,{rule:r,source:a,match:e,index:p}),t}let o=[];for(let t=0;t<=r.length;t++)o.push(e[i+t]);if(o.name=r.name,r.captures)for(let e=0;e<o.length;e++){if(!(e in r.captures))continue;let n=r.captures[e];"function"==typeof n&&(n=n()),"string"==typeof n?o[e]=c(o[e],n):n instanceof m&&o[e]&&(o[e]=n.parse(o[e],t))}if(r.before){let e=r.before(o,t);void 0!==e&&(o=e)}let l=r.replacement;o.name||(o.name=r.name),o.index=e.index;let u=l.evaluate(o);if(r.after){let e=r.after(u,t);void 0!==e&&(u=e)}return void 0!==p?[u,s]:u}return""}):e}_makeRules(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[];for(let a in e){let r=new b(a,e[a],t);n.push(r),t+=r.length}return n}match(e){return this._classNamePattern.test(e)}extend(){let e;for(var t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];if(1!==n.length)return n.forEach(e=>this.extend(e)),this;if((e=n[0])instanceof m&&(e=e.toObject()),!e)throw new Error("Nonexistent grammar!");let r=0;this.rules.length&&(r=this.rules.map(e=>e.length).reduce((e,t)=>e+t));let s=e,p=this._makeRules(s,r);return this.rules.push(...p),this.pattern=new RegExp(this.rules.map(e=>e.pattern).join("|"),this.options.ignoreCase?"mi":"m"),this}toObject(){let e={};return this.rules.forEach(t=>{e[t.name]=t.toObject()}),e}}const g={};m.register=(e,t)=>{g[e]=t},m.find=e=>(console.log("looking up:",e,g),g[e]||null),m.debug=()=>g;class b{constructor(e,t,n){this.name=e;let r=t.replacement;r?this.replacement=r instanceof p?r:new p(r):t.captures?this.replacement=null:this.replacement=b.DEFAULT_TEMPLATE,this.debug=t.debug,this.before=t.before,this.after=t.after,this.index=t.index,this.captures=t.captures;let s=t.pattern,o=t.pattern;"string"!=typeof o&&(o=a(o));let i=((o=o.replace(/\\(\d+)/g,(e,t)=>{let a=Number(t);return"\\".concat(n+a+1)})).match(/\(/g)||"").length,l=(o.match(/\(\?[:!=]/g)||"").length+(o.match(/\\\(/g)||"").length-(o.match(/\\\(\?[:!=]/g)||"").length;this.length=i+1-l,this.pattern="(".concat(o,")"),this.originalPattern=s,this.replacement||(this.replacement=b.makeReplacement(this.length,t.wrapReplacement))}toObject(){return{pattern:this.originalPattern,replacement:this.replacement,before:this.before,after:this.after,index:this.index,captures:this.captures}}}function w(e){return"function"==typeof e?e():e}function f(e,t){let n=e.final;if("boolean"==typeof n)return n;if("function"==typeof n)return n(t);if(n)throw new TypeError("Invalid value for rule.final!");return!1}b.DEFAULT_TEMPLATE=new p('<span class="#{name}">#{0}</span>'),b.makeReplacement=(e,t)=>{let n=[];for(let t=1;t<e;t++)n.push(t);let a=n.join("}#{");a="#{".concat(a,"}");let r=t?'<span class="#{name}">'.concat(a,"</span>"):a;return new p(r)};class h extends Error{constructor(e){super(e),this.name="LexerError"}}class y{constructor(e,t,n,a){this.name=e,this.content=t,this.index=a+n}}class x{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";this.rules=e,this.name=t}addRules(e){this.rules.push(...e)}[Symbol.iterator](){let e=[];for(let t of this.rules)if(t.include){let n=w(t.include);e.push([...n])}else e.push(t);return e.values()}run(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,{startIndex:n=0}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=[];t||(t=new Map);let r=null,s=n;for(;e;){let n,p,o;for(let a of this){if((o=a.pattern.exec(e))&&a.test){a.test(o,e,t,a.pattern)||(o=null)}if(o){if(0===o.index){p=o,n=a;break}(!p||o.index<p.index)&&(p=o,n=a)}}if(!p)break;let i=p.index,l=p.index+p[0].length;if(p.index>0){let t=e.slice(0,p.index);a.push(t),s+=t.length,i=0}e=e.slice(l);let c=f(n,t),u=c&&n.skipSubRulesIfFinal;if(n.raw)a.push(p[0]),s+=p[0].length;else if(!n.inside&&!n.after||u){let e=new y(n.name,p[0],i,s);a.push(e),s+=p[0].length}else{let r,o,l;if(n.inside?(l="inside",r=n.inside.name,o=w(n.inside.lexer)):(l="after",r=n.after.name,o=w(n.after.lexer)),!(o&&o instanceof x))throw new h("Invalid lexer!");let c=new y(n.name,p[0],i,s),u=s+p[0].length-i,d=[];"inside"===l?d.push(c):a.push(c);let m=o.run(e,t,{startIndex:u});d.push(...m.tokens);let g=new y(r,d,i,s);a.push(g),s=m.lengthConsumed,e=m.text}if(c)break;if(e===r)break;r=e}return{tokens:a,text:e,lengthConsumed:s}}}const{balance:k,compact:v,VerboseRegExp:A}=u;let _=new m({parameter:{pattern:/(?:\b|^)((?:(?:[A-Za-z_$][\w\d]*)\s)*)(\s*)([a-zA-Z_$:][\w\d]*)(?=,|$)/,replacement:v('\n      <span class="parameter">\n        <span class="storage storage-type">#{1}</span>\n        #{2}\n        <span class="variable">#{3}</span>\n      </span>\n    '),captures:{1:()=>R}}}),$=new m({escape:{pattern:/\\./}});const z=new m({"meta: function":{pattern:/([A-Za-z_$]\w*)(\s+)([a-zA-Z_$:]\w*)(\s*)(\()(.*)(\))(\s*)(?={)/,index(e){let t=k(e,")","(",{startIndex:e.indexOf("(")});return e.indexOf("{",t)-1},replacement:"<b><span class='storage storage-type storage-return-type'>#{1}</span>#{2}#{3}#{4}#{5}#{6}#{7}#{8}</b>",captures:{3:"entity",6:()=>_}},"meta: bare declaration":{pattern:/\b([A-Za-z_$][\w\d]*)(\s+)([A-Za-z_$][\w\d]*)(\s*)(?=;)/,captures:{1:"storage storage-type",3:"variable"}},"meta: declaration with assignment":{pattern:/\b([A-Za-z_$][\w\d]*)(\s+)([A-Za-z_$][\w\d]*)(\s*)(=)/,captures:{1:"storage storage-type",3:"variable",5:"operator"}},"meta: array declaration":{pattern:/\b([A-Za-z_$][\w\d]*)(\s+)([A-Za-z_$][\w\d]*)(\[)(\d+)(\])/,captures:{1:"storage storage-type",3:"variable",4:"punctuation",5:"number",6:"punctuation"}},"meta: declaration with parens":{pattern:/\b([A-Za-z_$][\w\d]*)(\s+)([A-Za-z_$][\w\d]*)(\s*)(\()([\s\S]*)(\))(;)/,index(e){let t=k(e,")","(")+1;return e.indexOf(";",t)},captures:{1:"storage storage-type",3:"variable",5:"punctuation",6:()=>Z,7:"punctuation"}},"meta: class declaration":{pattern:/\b(class|enum)(\s+)([A-Za-z][A-Za-z0-9:_$]*)(\s*)({)/,captures:{1:"storage storage-type",3:"entity entity-class"}}}),Z=new m({constant:{pattern:/\b[A-Z_]+\b/},lambda:{pattern:/(\[\])(\s*)(\()([\s\S]*)(\))(\s*)({)([\s\S]*)(})/,index:e=>k(e,"}","{",{startIndex:e.indexOf("{")}),wrapReplacement:!0,captures:{1:"punctuation",3:"punctuation",4:()=>_,5:"punctuation",7:"punctuation",8:()=>q,9:"punctuation"}},"constant constant-boolean":{pattern:/\b(?:true|false)\b/},"string string-single-quoted":{pattern:/(')((?:[^'\\]|\\\\|\\')*)(')/,wrapReplacement:!0,captures:{2:()=>$}},"string string-double-quoted":{pattern:/(")((?:[^"\\]|\\\\|\\")*)(")/,wrapReplacement:!0,captures:{2:()=>$}},number:{pattern:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i}}),j=new m({comment:{pattern:/(\/\/[^\n]*(?=\n|$))|(\/\*[^*]*\*+([^\/][^*]*\*+)*\/)/}}),R=new m({"storage storage-type":{pattern:/\b(?:u?int(?:8|16|36|64)_t|int|long|float|double|char(?:16|32)_t|char|class|bool|wchar_t|volatile|virtual|extern|mutable|const|unsigned|signed|static|struct|template|private|protected|public|mutable|volatile|namespace|struct|void|short|enum)/}}),E=new m({}).extend(j,Z),O=new m({"macro macro-define":{pattern:/^(\#define)(\s+)(\w+)(.*?)$/,replacement:v('\n      <span class="keyword keyword-macro">#{1}</span>#{2}\n      <span class="entity entity-macro">#{3}</span>\n      #{4}\n    '),captures:{1:"keyword keyword-macro",3:"entity entity-macro",4:()=>E}},"macro macro-include":{pattern:/^(\#include)(\s+)("|<|&lt;)(.*?)("|>|&gt;)(?=\n|$)/,replacement:v('\n      <span class="keyword keyword-macro">#{1}</span>#{2}\n      <span class="string string-include">\n        <span class="punctuation">#{3}</span>\n        #{4}\n        <span class="punctuation">#{5}</span>\n      </span>\n    ')},"macro macro-with-one-argument":{pattern:/(\#(?:ifdef|ifndef|undef|if))(\s+)(\w+)/,captures:{1:"keyword keyword-macro",3:"entity entity-macro"}},"macro macro-error":{pattern:/(#error)(\s*)(")(.*)(")/,replacement:v('\n      <span class="keyword keyword-macro">#{1}</span>\n      #{2}\n      <span class="string string-quoted">#{3}#{4}#{5}</span>\n    ')},"keyword keyword-macro":{pattern:/#(endif|else)/}}),q=new m("arduino",{"keyword keyword-control":{pattern:/\b(?:alignas|alignof|asm|auto|break|case|catch|compl|constexpr|const_cast|continue|decltype|default|delete|do|dynamic_cast|else|explicit|export|for|friend|goto|if|inline|new|noexcept|nullptr|operator|register|reinterpret_cast|return|sizeof|static_assert|static_cast|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|using|while)\b/}}).extend(j,z);q.extend(O,Z,R,{operator:{pattern:/--?|\+\+?|!=?|(?:<|&lt;){1,2}=?|(&gt;|>){1,2}=?|-(?:>|&gt;)|:{1,2}|={1,2}|\^|~|%|&{1,2}|\|\|?|\?|\*|\/|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/}});const{balanceByLexer:S,compact:I,VerboseRegExp:P}=u,T=new x([{name:"string-escape",pattern:/\\./},{name:"string-end",pattern:/('|")/,test:(e,t,n)=>{let a=n.get("string-begin"),r=e.exec(t);return!!r&&(r[1]===a&&(n.set("string-begin",null),r))},final:!0}]),D=new x([{name:"string-begin",pattern:/^\s*('|")/,test:(e,t,n)=>{let a=e.exec(t);return!!a&&(n.set("string-begin",a[1]),a)},inside:{name:"string",lexer:T}}]),F=new x([{name:"punctuation",pattern:/^=/,after:{name:"attribute-value",lexer:D}}]),L=new x([{name:"tag tag-html",pattern:/^[a-z]+(?=\s)/},{name:"attribute-name",pattern:/^\s*(?:\/)?[a-z]+(?=\=)/,after:{name:"attribute-separator",lexer:F}},{name:"punctuation",pattern:/\/(?:>|&gt;)/,final:!0},{name:"punctuation",pattern:/(>|&gt;)/,final:!0}]),N=new x([{name:"punctuation",pattern:/^(?:<|&lt;)/,after:{name:"tag",lexer:L}}]),M=new m({string:{pattern:/('[^']*[^\\]'|"[^"]*[^\\]")/},attribute:{pattern:/\b([a-zA-Z-:]+)(=)/,replacement:I("\n      <span class='attribute'>\n        <span class='#{name}'>#{1}</span>\n        <span class='punctuation'>#{2}</span>\n      </span>\n    ")}}),{balance:V,balanceByLexer:C,compact:B,wrap:U,VerboseRegExp:G}=(new m("html",{doctype:{pattern:/&lt;!DOCTYPE([^&]|&[^g]|&g[^t])*&gt;/},"embedded embedded-javascript":{pattern:/(&lt;|<)(script|SCRIPT)(\s+.*?)?(&gt;|>)([\s\S]*?)((?:&lt;|<)\/)(script|SCRIPT)(&gt;|>)/,replacement:I("\n      <span class='element element-opening'>\n        <span class='punctuation'>#{1}</span>\n        <span class='tag'>#{2}</span>#{3}\n        <span class='punctuation'>#{4}</span>\n      </span>\n        #{5}\n      <span class='element element-closing'>\n        <span class='punctuation'>#{6}</span>\n        <span class='tag'>#{7}</span>\n        <span class='punctuation'>#{8}</span>\n      </span>\n    "),before:(e,t)=>{e[3]&&(e[3]=M.parse(e[3],t)),e[5]=t.highlighter.parse(e[5],"javascript",t)}},"tag tag-open":{pattern:/((?:<|&lt;))([a-zA-Z0-9:]+\s*)([\s\S]*)(\/)?(&gt;|>)/,index:function(e){return S(e,N)},replacement:I("\n      <span class='element element-opening'>\n        <span class='punctuation'>#{1}</span>\n        <span class='tag'>#{2}</span>#{3}\n        <span class='punctuation'>#{4}#{5}</span>\n      </span>#{6}\n    "),before:(e,t)=>{e[3]=M.parse(e[3],t)}},"tag tag-close":{pattern:/(&lt;\/)([a-zA-Z0-9:]+)(&gt;)/,replacement:I("\n      <span class='element element-closing'>\n        <span class='punctuation'>#{1}</span>\n        <span class='tag'>#{2}</span>\n        <span class='punctuation'>#{3}</span>\n      </span>\n    ")},comment:{pattern:/&lt;!\s*(--([^-]|[\r\n]|-[^-])*--\s*)&gt;/}},{encode:!0}),u),Q=new x([{name:"string-escape",pattern:/\\./},{name:"string-end",pattern:/('|")/,test:(e,t,n)=>{let a=n.get("string-begin");return e[1]===a&&(n.set("string-begin",null),e)},final:!0}],"string"),X=new x([{name:"punctuation",pattern:/\{/,inside:{lexer:()=>X}},{name:"punctuation",pattern:/\}/,final:!0}],"balance-braces"),Y=new x([{name:"exclude escaped closing brace",pattern:/\\\}/,raw:!0},{name:"interpolation-end",pattern:/\}/,final:!0}],"template-string-interpolation"),H=new x([{name:"interpolation-start",pattern:/(\$\{)/,inside:{name:"interpolation",lexer:Y}},{name:"exclude escaped backtick",pattern:/\\\x60/,raw:!0},{name:"string-end",pattern:/\x60/,final:!0}],"template-string"),J=new x([{name:"punctuation",pattern:/\{/,inside:{lexer:X}},{name:"exclude escaped closing brace",pattern:/\\\}/,raw:!0},{name:"string-begin",pattern:/^\s*('|")/,test:(e,t,n)=>(n.set("string-begin",e[1]),e),inside:{name:"string",lexer:Q}},{name:"template-string-begin",pattern:/\x60/,inside:{name:"template-string",lexer:H}},{name:"interpolation-end",pattern:/\}/,final:!0}],"jsx-interpolation"),K=new x([{name:"interpolation-begin",pattern:/^\{/,inside:{name:"interpolation",lexer:J}}],"before-jsx-interpolation"),W=new x([{name:"interpolation-begin",pattern:/^\{/,inside:{name:"interpolation",lexer:J},final:!0},{name:"string-begin",pattern:/^\s*('|")/,test:(e,t,n)=>(n.set("string-begin",e[1]),e),inside:{name:"string",lexer:Q}}],"attribute-value"),ee=new x([{name:"punctuation",pattern:/^=/,after:{name:"attribute-value",lexer:W}}],"attribute-separator"),te=new x([{name:"tag tag-html",pattern:/^[a-z]+(?=&gt;|>)/},{name:"tag tag-jsx",pattern:/^[A-Z][A-Za-z0-9_$\.]*(?=&gt;|>)/},{name:"punctuation",pattern:/^\s*(?:>|&gt;)/,test:(e,t,n)=>{let a=n.get("jsx-tag-depth");if(a<1)throw new Error("Depth error!");return a--,n.set("jsx-tag-depth",a),e},final:!0}],"jsx-closing-tag"),ne=new x([{name:"punctuation",pattern:/^\s*\{/,inside:{name:"interpolation",lexer:J}},{name:"attribute-name",pattern:/^\s*[a-zA-Z][a-zA-Z0-9_$]+(?=\=)/,after:{name:"attribute-separator",lexer:ee}},{name:"punctuation",pattern:/^\s*\/(?:>|&gt;)/,test:(e,t,n)=>(n.set("is-opening-tag",null),e),final:e=>e.get("is-root")},{name:"punctuation",pattern:/^\s*(>|&gt;)/,test:(e,t,n)=>{let a=n.get("is-opening-tag"),r=n.get("jsx-tag-depth");return 0!==(r+=a?1:-1)&&(n.set("jsx-tag-depth",r),n.set("is-opening-tag",null),e)},final:e=>{let t=e.get("jsx-tag-depth");return e.get("only-opening-tag")||0===t},skipSubRulesIfFinal:!0,after:{name:"jsx-contents",lexer:()=>ae}}],"inside-tag"),ae=new x([{name:"punctuation",pattern:/^\s*(?:<|&lt;)(?!\/)/,after:{name:"tag",lexer:()=>re}},{name:"punctuation",pattern:/(?:<|&lt;)\/(?=[A-Za-z])/,inside:{name:"element jsx-element",lexer:te},final:!0},{name:"punctuation",pattern:/\{/,inside:{name:"interpolation",lexer:J}}],"within-tag"),re=new x([{name:"tag tag-html",pattern:/^[a-z\-]+(?=\s|(?:>|&gt;))/,test:(e,t,n)=>{return n.set("is-opening-tag",!0),"number"!=typeof n.get("jsx-tag-depth")&&n.set("jsx-tag-depth",0),e},after:{name:"jsx-tag-contents",lexer:ne},final:e=>e.get("only-opening-tag")},{name:"tag tag-jsx",pattern:/^[A-Z][\w\d$\.]*(?=\s|(?:>|&gt;))/,test:(e,t,n)=>{return n.set("is-opening-tag",!0),"number"!=typeof n.get("jsx-tag-depth")&&n.set("jsx-tag-depth",0),e},after:{name:"jsx-tag-contents",lexer:ne}}],"tag-name"),se=new x([{name:"punctuation",pattern:/^\s*(?:<|&lt;)(?!\/)/,test:(e,t,n)=>(n.set("only-opening-tag",!0),e),after:{name:"tag",lexer:re},final:!0}],"tag-open-start"),pe=new x([{name:"punctuation",pattern:/^\s*(?:<|&lt;)(?!\/)/,test:(e,t,n)=>(n.set("is-root",!0),e),after:{name:"tag",lexer:re}}],"tag-root");let oe=new m({escape:{pattern:/\\./}}),ie=new m({escape:{pattern:/\\./},"exclude from group begin":{pattern:/(\\\()/,replacement:"#{1}"},"group-begin":{pattern:/(\()/,replacement:'<b class="group">#{1}'},"group-end":{pattern:/(\))/,replacement:"#{1}</b>"}}),le=new m({interpolation:{pattern:/(\$\{)(.*?)(\})/,captures:{1:"punctuation interpolation-start",2:()=>je,3:"punctuation interpolation-end"},wrapReplacement:!0}}).extend(oe);const ce=new m({"parameter parameter-with-default":{pattern:/([A-Za-z$_][$_A-Za-z0-9_]*)(\s*=\s*)(.*?)(?=,|\)|\n|$)/,captures:{1:"variable parameter",2:"operator",3:()=>ke}},"keyword operator":{pattern:/\.{3}/},operator:{pattern:/=/},"variable parameter":{pattern:/[A-Za-z$_][$_A-Za-z0-9_]*/}});let ue=new m({"string string-template embedded":{pattern:/(`)((?:[^`\\]|\\\\|\\.)*)(`)/,captures:{1:"punctuation string-start",2:le,3:"punctuation string-end"},wrapReplacement:!0},"string string-single-quoted":{pattern:/(')((?:[^'\\]|\\\\|\\.)*)(')/,replacement:"<span class='#{name}'>#{1}#{2}#{3}</span>",captures:{2:oe}},"string string-double-quoted":{pattern:/(")((?:[^"\\]|\\\\|\\.)*)(")/,captures:{2:oe},wrapReplacement:!0}}),de=new m({"embedded jsx-interpolation":{pattern:/(\{)([\s\S]*)(\})/,index:e=>C(e,K),captures:{1:"punctuation embedded-start",2:()=>Ze,3:"punctuation embedded-end"},wrapReplacement:!0}}),me=new m({string:{pattern:/('[^']*[^\\]'|"[^"]*[^\\]")/},attribute:{pattern:/\b([a-zA-Z-:]+)(=)/,replacement:B("\n      <span class='attribute'>\n        <span class='#{name}'>#{1}</span>\n        <span class='punctuation'>#{2}</span>\n      </span>\n    ")}}).extend(de),ge=new m({});ge.extend(me),ge.extend(de),ge.extend({"punctuation punctuation-tag-close":{pattern:/>|\/>/}});let be=new m({jsx:{pattern:/(<|&lt;)([a-zA-Z_$][a-zA-Z0-9_$\.]*\s*)([\s\S]*)(&gt;|>)/,index:e=>C(e,pe),replacement:B("\n      <span class='jsx'>#{0}</span>\n    "),before:e=>{e[0]=he.parse(e[0])}}});function we(e){return e.match(/^[A-Z]/)?U(e,"tag tag-jsx"):U(e,"tag tag-html")}let fe=new m({"meta: opening tag without attributes":{pattern:/(<|&lt;)([\w$][\w\d$\.]*)(&gt;|>)/,replacement:B("\n      <span class='jsx-element element element-opening'>\n        <span class='punctuation'>#{1}</span>\n        #{2}\n        <span class='punctuation'>#{3}</span>\n      </span>\n    "),before(e,t){e[2]=we(e[2])}},"tag tag-open":{pattern:/(<|&lt;)([\w$][\w\d$\.]*)(\s+)([\s\S]*)(.)(&gt;|>)/,replacement:B("\n      <span class='#{name}'>\n        <span class='punctuation'>#{1}</span>\n        #{2}#{3}#{4}#{5}\n        <span class='punctuation'>#{6}</span>\n      </span>\n    "),index:e=>C(e,se),before(e,t){e.name="jsx-element element element-opening",e[2]=we(e[2]),e[5]&&("/"===e[5]?(e.name=e.name.replace("element-opening","element-self"),e[5]=U(e[5],"punctuation")):(e[4]+=e[5],e[5]="")),e[4]=me.parse(e[4],t)}},"tag tag-close":{pattern:/((?:<|&lt;)\/)([\w$][\w\d_$\.]*)(\s*)(&gt;|>)/,replacement:B("\n      <span class='jsx-element element element-closing'>\n        <span class='punctuation'>#{1}</span>\n        <span class='tag'>#{2}</span>#{3}\n        <span class='punctuation'>#{4}</span>\n      </span>\n    ")}}),he=new m({}).extend(de,fe),ye=new m({params:{pattern:/(\()([^)]+)(\))/,wrapReplacement:!0,captures:{1:"punctuation",2:ce,3:"punctuation"}},"variable parameter":{pattern:/[\w$][\w\d_$]*/}}),xe=new m({"single-parameter multiline arrow function":{pattern:/([\w$][\w\d$]*)(\s*)(=(?:>|&gt;))/,captures:{1:ye,3:"operator"}},"meta: arrow function with params in parentheses":{pattern:/(\([^)]+\))(\s*)(=(?:>|&gt;))/,captures:{1:ye,3:"operator"}},"single line arrow function":{pattern:/(\(?[^)]\)?|[a-zA-Z_$][a-zA-Z0-9_$]*)(\s*)(=(?:>|&gt;))(\s*)/,captures:{1:ye,3:"operator"}}}),ke=new m({});ke.extend({constant:{pattern:/\b(?:arguments|this|false|true|super|null|undefined)\b/},"number number-binary-or-octal":{pattern:/0[bo]\d+/},number:{pattern:/(?:\d*\.?\d+)/}}),ke.extend(xe),ke.extend(ue),ke.extend({comment:{pattern:/(\/\/[^\n]*\n)|(\/\*[^*]*\*+([^\/][^*]*\*+)*\/)/},regexp:{pattern:/(\/)(.*?[^\\])(\/)([mgiy]*)/,captures:{2:ie,4:"keyword regexp-flags"},wrapReplacement:!0}});let ve=new m({alias:{pattern:/([A-Za-z$_][$_A-Za-z0-9_]*)(\s*)(:)(\s*)(?=\w|\{|\[)/,captures:{1:"entity"}},variable:{pattern:/[A-Za-z$_][$_A-Za-z0-9_]*/},operator:{pattern:/=/}}),Ae=new m({ordinary:{pattern:/(^|,)(\s*)([A-Za-z_$][A-Za-z_$0-9]*)(\s*)(?=$|,)/,captures:{1:"punctuation",3:"variable variable-import"}},"default as":{pattern:/(^|,)(\s*)(default)(\s*)(as)(\s*)([\w$][\w\d$]*)(\s*)(?=$|,)/,captures:{1:"punctuation",3:"keyword keyword-default",5:"keyword keyword-as",7:"variable variable-import"}}}),_e=new m({"implicit default specifier":{pattern:/^(\s*)([A-Za-z_$][A-Za-z_$0-9]*)(\s*)(?=,|$)/,captures:{2:"variable variable-import"}},specifiers:{pattern:/(\{)(\s*)([^}]+)(})/,captures:{3:Ae}}}),$e=new m({"import with destructuring":{pattern:/(^\s*)(import)(\s*)(?=\{)([\s\S]*?)(\s*)(from)(\s*)(.*?)(?=;|\n)/,captures:{2:"keyword keyword-import",4:_e,6:"keyword keyword-from",8:ue}},"import with source":{pattern:/(^\s*)(import)(\s*)(.*?)(\s*)(from)(\s*)(.*?)(?=;|\n)/,captures:{2:"keyword keyword-import",4:()=>_e,6:"keyword keyword-from",8:()=>ue}},"import without source":{pattern:/(^\s*)(import)(\s*)(?=\`|'|")(.*?)(?=;|\n)/,captures:{2:"keyword keyword-import",4:()=>ue}}}),ze=new m({"keyword operator":{pattern:/\|\||&&|&amp;&amp;|!==?|={1,3}|>=?|<=?|\+\+|\+|--|-|\*|[\*\+-\/]=|\?|\.{3}|\b(?:instanceof|in|of)\b/}}),Ze=new m({});Ze.extend(fe),Ze.extend(ke),Ze.extend(xe),Ze.extend(ze);let je=new m("javascript-jsx",{},{alias:["react","javascript"]});je.extend(be),je.extend($e),je.extend(ke),je.extend({"meta: exclude digits in the middle of identifiers":{pattern:/\$\d/,replacement:"#{0}"},"meta: properties with keyword names":{pattern:/(\.)(for|if|while|switch|catch|return)\b/,replacement:"#{0}"},"meta: functions with keyword names":{pattern:/(\s*)\b(for|if|while|switch|catch)\b/,replacement:"#{1}<span class='keyword'>#{2}</span>"},"meta: new keyword plus identifier":{pattern:/(new)(\s+)((?:[\w$][\w\d$]*\.)*)([\w$][\w\d$]*)(?=\()/,captures:{1:"keyword keyword-new",4:"entity-class"}},"meta: variable declaration":{pattern:/\b(var|let|const)(\s+)([\w$][\w\d$]*?)(\s*)(?=\s|=|;|,)/,captures:{1:"storage",3:"variable"}},"meta: variable assignment":{pattern:/(\s+|,)([A-Za-z_$][\w\d$]*?)(\s*)(?==)(?!=(?:>|&gt;))/,captures:{2:"variable"}},"meta: destructuring assignment":{pattern:/(let|var|const)(\s+)(\{|\[)([\s\S]*)(\}|\])(\s*)(=)/,index:e=>{let t=/(let|var|const|)(\s+)(\{|\[)/.exec(e)[3],n=V(e,{"{":"}","[":"]"}[t],t),a=e.indexOf("=",n);e.slice(0,a+1);return a},captures:{1:"storage",4:ve,7:"operator"}},"function function-expression":{pattern:/\b(function)(\s*)([a-zA-Z_$]\w*)?(\s*)(\()(.*?)(\))/,captures:{1:"keyword keyword-function",3:"entity",5:"punctuation",6:ce,7:"punctuation"}},"function function-literal-shorthand-style":{pattern:/(^\s*)(get|set|static)?(\s*)([\w$][\w\d$]*)(\s*)(\()(.*?)(\))(\s*)(?=\{)/,captures:{2:"storage",4:"entity",6:"punctuation",7:ce,8:"punctuation"}},"meta: function shorthand with computed property name":{pattern:/(])(\s*)(\()(.*?)(\))(\s*)(?=\{)/,captures:{3:"punctuation",4:ce,5:"punctuation",7:"punctuation"}},"function function-assigned-to-variable":{pattern:/\b([\w$][\w\d$]*)(\s*)(=)(\s*)(function)(\s*)(\()(.*?)(\))/,captures:{1:"variable",3:"operator",5:"keyword",7:"punctuation",8:ce,9:"punctuation"}},"meta: property then function":{pattern:/([A-Za-z_$][A-Za-z0-9_$]*)(:)(\s*)(?=function)/,captures:{1:"entity",2:"punctuation"}},entity:{pattern:/([A-Za-z_$][A-Za-z0-9_$]*)(?=:)/},"meta: class definition":{pattern:/(class)(?:(\s+)([A-Z][A-Za-z0-9_]*))?(?:(\s+)(extends)(\s+)([A-Z][A-Za-z0-9_$\.]*))?(\s*)({)/,index:e=>V(e,"}","{",{startIndex:e.indexOf("{")+1}),replacement:B('\n      <span class="storage">#{1}</span>\n      #{2}#{3}\n      #{4}#{5}#{6}#{7}\n      #{8}#{9}\n    '),captures:{1:"storage",3:"entity entity-class",5:"storage",7:"entity entity-class entity-superclass"}},storage:{pattern:/\b(?:var|let|const|class|extends|async)\b/},keyword:{pattern:/\b(?:try|catch|finally|if|else|do|while|for|break|continue|case|switch|default|return|yield|throw|await)\b/}}).extend(ze);const{balance:Re,wrap:Ee,compact:Oe,VerboseRegExp:qe}=u,Se=new m({interpolation:{pattern:/\{(\d*)\}/},"escape escape-hex":{pattern:/\\x[0-9a-fA-F]{2}/},"escape escape-octal":{pattern:/\\[0-7]{3}/},escape:{pattern:/\\./}}),Ie=new m({lambda:{pattern:/(lambda)(\s+)(.*?)(:)/,captures:{1:"keyword storage",3:()=>Te}},"string string-triple-quoted":{pattern:/"""[\s\S]*?"""/,before:(e,t)=>{e[0]=Se.parse(e[0],t)}},"string string-raw string-single-quoted":{pattern:/([urb]+)(')(.*?[^\\]|[^\\]*)(')/,replacement:"<span class='storage string'>#{1}</span><span class='#{name}'>#{2}#{3}#{4}</span>",captures:{3:()=>Se}},"string string-single-quoted":{pattern:/([ub])?(')((?:[^'\\]|\\.)*)(')/,replacement:"#{1}<span class='#{name}'>#{2}#{3}#{4}</span>",captures:{1:"storage string",3:()=>Se}},"string string-double-quoted":{pattern:/([ub])?(")((?:[^"\\]|\\.)*)(")/,replacement:"#{1}<span class='#{name}'>#{2}#{3}#{4}</span>",captures:{1:"storage string",3:()=>Se}},constant:{pattern:/\b(self|None|True|False)\b/},"constant constant-assignment":{pattern:/^([A-Z][A-Za-z\d_]*)(\s*)(?=\=)/,replacement:"<span class='#{name}'>#{1}</span>#{2}"},"constant constant-named":{pattern:/\b([A-Z_]+)(?!\.)\b/},"variable variable-assignment":{pattern:/([a-z_][[A-Za-z\d_]*)(\s*)(?=\=)/,replacement:"<span class='#{name}'>#{1}</span>#{2}"},number:{pattern:/(\b|-)((0(x|X)[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?))\b/},"number number-binary":{pattern:/0b[01]+/},"number number-octal":{pattern:/0o[0-7]+/}}),Pe=new m({"meta: parameter with default":{pattern:/(\s*)([A-Za-z0-9_]+)(\s*=\s*)(.*?)(?=,|$)/,captures:{2:"variable parameter",3:"keyword punctuation",4:Ie}}}).extend(Ie),Te=new m({"meta: parameter":{pattern:/(\s*)(\*\*?)?([A-Za-z0-9_]+)(?=,|$)/,captures:{2:"keyword operator",3:"variable parameter"}}}),De=new m({"meta: parameter with default":{pattern:/(\s*)([A-Za-z0-9_]+)(\s*=\s*)(.*?)(?=,|$)/,captures:{2:"variable parameter",3:"keyword punctuation",4:()=>Ie}}}).extend(Te);new m("python",{"storage storage-type support":{pattern:/(int|float|bool|chr|str|bytes|list|dict|set)(?=\()/},"support support-builtin":{pattern:/(repr|round|print|input|len|min|max|sum|sorted|enumerate|zip|all|any|open)(?=\()/},"meta: from/import/as":{pattern:/(from)(\s+)(.*?)(\s+)(import)(\s+)(.*?)(\s+)(as)(\s+)(.*?)(?=\n|$)/,captures:{1:"keyword",5:"keyword",9:"keyword"}},"meta: from/import":{pattern:/(from)(\s+)(.*?)(\s+)(import)(\s+)(.*?)(?=\n|$)/,captures:{1:"keyword",5:"keyword"}},"meta: subclass":{pattern:/(class)(\s+)([\w\d_]+)(\()([\w\d_]*)(\))(\s*)(:)/,captures:{1:"keyword",3:"entity entity-class",4:"punctuation",5:"entity entity-class entity-superclass",6:"punctuation",8:"punctuation"}},"meta: class":{pattern:/(class)(\s+)([\w\d_]+)(:)/,captures:{1:"keyword",3:"entity entity-class",4:"punctuation"}},comment:{pattern:/#[^\n]*(?=\n)/},keyword:{pattern:/\b(?:if|else|elif|print|class|pass|from|import|raise|while|try|finally|except|return|global|nonlocal|for|in|del|with)\b/},"meta: method definition":{pattern:/(def)(\s+)([A-Za-z0-9_!?]+)(\s*)(\()(.*?)?(\))/,captures:{1:"keyword",3:"entity",5:"punctuation",6:De,7:"punctuation"}},"meta: method invocation":{pattern:/([A-Za-z0-9_!?]+)(\s*)(\()(\s*)([\s\S]*)(\s*\))/,index:e=>Re(e,")","(",e.indexOf("(")),captures:{3:"punctuation",5:()=>Pe,6:"punctuation"}},"keyword operator operator-logical":{pattern:/\b(and|or|not)\b/},"keyword operator operator-bitwise":{pattern:/(?:&|\||~|\^|>>|<<)/},"keyword operator operator-assignment":{pattern:/=/},"keyword operator operator-comparison":{pattern:/(?:>=|<=|!=|==|>|<)/},"keyword operator operator-arithmetic":{pattern:/(?:\+=|\-=|=|\+|\-|%|\/\/|\/|\*\*|\*)/}}).extend(Ie);const{balance:Fe,compact:Le,VerboseRegExp:Ne}=u;function Me(e,t){return e.indexOf(t)>-1}function Ve(e,t){let n=e.slice(t).join(""),a=Fe(n,"}","{",{stackDepth:1});if(-1===a)return;let r=0;for(let n=t;n<e.length;n++)if((r+=e[n].length)>=a)return n}function Ce(e,t,n){let a=[];for(let r=t;r<=n;r++)a.push(e[r]);return a.join(",")}function Be(e,t,n){t||(t=Ue);let a=e.split(/,/),r=[];for(let e,t=0;t<a.length;t++)if(e=a[t],Me(s=e,"{")&&!Me(s,"}")){let e=Ve(a,t+1),n=Ce(a,t,e);r.push(n),t=e}else r.push(e);var s;return r.map(e=>t.parse(e,n))}const Ue=new m({"meta: parameter with default":{pattern:/^(\s*)([A-Za-z0-9_]+)(\s*=\s*)(.*)/,captures:{2:"variable parameter",3:"keyword operator",4:()=>Qe}},"meta: variable":{pattern:/^(\s*)([A-Za-z0-9_]+)$/,captures:{2:"variable parameter"}}}),Ge=new m({"meta: block variable":{pattern:/^(\s*)([A-Za-z0-9_]+)$/,replacement:"#{1}<span class='#{name}'>#{2}</span>",captures:{2:"variable parameter"}}}),Qe=new m({"string string-single-quoted":{pattern:/(')([^']*?)(')/},"string string-double-quoted":{pattern:/(")(.*?[^\\])(")/,wrapReplacement:!0,captures:{2:()=>Ye}},"string string-double-quoted empty":{pattern:/\"\"/},"string string-percent-q string-percent-q-braces":{pattern:/(%Q\{)([\s\S]*)(\})/,index:e=>Fe(e,"}","{",{startIndex:e.indexOf("{")}),wrapReplacement:!0,captures:{2:()=>Ye}},"string string-percent-q string-percent-q-brackets":{pattern:/(%Q\[)(.*?[^\\])(\])/,wrapReplacement:!0,captures:{2:()=>Ye}},"string embedded string-shell-command":{pattern:/(`)([^`]*?)(`)/,wrapReplacement:!0,captures:{2:()=>Ye}},constant:{pattern:/\b(self|true|false|nil(?!\?))\b/},"number binary":{pattern:/\b0b[01](?:_[01]|[01])*\b/},number:{pattern:/\b(\d(?:[_.]\d|\d)*)\b/},"punctuation punctuation-namespace":{pattern:/(::)/},symbol:{pattern:/:[A-Za-z0-9_!?]+/},"symbol single-quoted":{pattern:/:'([^']*?)'/},"symbol double-quoted":{pattern:/(:)(")(.*?[^\\])(")/,wrapReplacement:!0,captures:{3:()=>Ye}},regexp:{pattern:/(\/)(.*?)(\/)/,wrapReplacement:!0,captures:{2:()=>Xe}},"variable variable-instance":{pattern:/(@)[a-zA-Z_][\w\d]*/},"variable variable-global":{pattern:/(\$)[a-zA-Z_][\w\d]*/},keyword:{pattern:/\b(do|class|def|if|module|yield|then|else|for|until|unless|while|elsif|case|when|break|retry|redo|rescue|require|lambda)\b/}}),Xe=new m({escape:{pattern:/\\./},"meta: exclude from group begin":{pattern:/\\\(/,replacement:"#{0}"},"group-begin":{pattern:/(\()/,replacement:'<b class="group">#{1}'},"group-end":{pattern:/(\))/,replacement:"#{1}</b>"}}),Ye=new m({escape:{pattern:/\\./},interpolation:{pattern:/(#\{)(.*?)(\})/,captures:{1:"punctuation",2:()=>He,3:"punctuation"},wrapReplacement:!0}}),He=new m("ruby",{"meta: method definition":{pattern:/(def)(\s+)([A-Za-z0-9_!?.]+)(?:\s*(\()(.*?)(\)))?/,captures:{1:"keyword",3:"entity"},before:(e,t)=>{e[5]&&(e[5]=Be(e[5],null,t))}},"block block-braces":{pattern:/(\{)(\s*)(\|)([^|]*?)(\|)/,replacement:Le("\n      <b class='#{name}'>\n        <span class='punctuation brace'>#{1}</span>#{2}\n        <span class='punctuation pipe'>#{3}</span>\n        #{4}\n        <span class='punctuation pipe'>#{5}</span>\n    "),before:(e,t)=>{t.get("bracesStack",[]).push(e.name),e[4]=Be(e[4],Ge,t)}},"block block-do-end":{pattern:/(do)(\s*)(\|)([^|]*?)(\|)/,replacement:Le("\n      <b class='#{name}'>\n        <span class='keyword'>#{1}</span>#{2}\n        <span class='punctuation pipe'>#{3}</span>\n        #{4}\n        <span class='punctuation pipe'>#{5}</span>\n    "),before:(e,t)=>{t.get("bracesStack",[]).push(e.name),e[4]=Be(e[4],null,t),e[6]=He.parse(e[6],t)}},"meta: class definition with superclass":{pattern:/(class)(\s+)([A-Z][A-Za-z0-9_]*)(\s*(?:<|&lt;)\s*)([A-Z][A-Za-z0-9:_]*)/,replacement:Le("\n      <span class='keyword'>#{1}</span>#{2}\n      <span class='class-definition-signature'>\n        <span class='class'>#{3}</span>#{4}<span class='class superclass'>#{5}</span>\n      </span>\n    ")},"meta: class or module definition":{pattern:/(class|module)(\s+)([A-Z][A-Za-z0-9_]*)\s*(?=$|\n)/,replacement:Le("\n      <span class='keyword'>#{1}</span>#{2}\n      <span class='class-definition-signature'>\n        <span class='class'>#{3}</span>\n      </span>\n    ")},"string heredoc-indented":{pattern:/(&lt;&lt;-|<<-)([_\w]+?)\b([\s\S]+?)(\2)/,replacement:Le("\n      <span class='#{name}'>\n        <span class='heredoc-begin'>#{1}#{2}</span>\n        #{3}\n        <span class='heredoc-end'>#{4}</span>\n      </span>\n    "),captures:{2:()=>Ye}},"keyword operator":{pattern:/(\+|-|\*|\/|>|&gt;|<|&lt;|=>|=&gt;|>>|&gt;&gt;|<<|&lt;&lt;|=~|\|\|=|==|=|\|\||&&|\+=|-=|\*=|\/=)/},"keyword special":{pattern:/\b(initialize|new|loop|extend|raise|attr|catch|throw|private|protected|public|module_function|attr_(?:reader|writer|accessor))\b/}});He.extend(Qe),He.extend({comment:{pattern:/#[^\n]+/},"bracket-block-end":{pattern:/\}/,replacement:"#{0}",after:(e,t)=>{let n=t.get("bracesStack",[]).pop();if(n)return"".concat(e,"\x3c!-- close ").concat(n," --\x3e</b>")}},"keyword keyword-block-end":{pattern:/\b(end)\b/,after:(e,t)=>{let n=t.get("bracesStack",[]).pop();if(n)return"".concat(e,"\x3c!-- close ").concat(n," --\x3e</b>")}}});const{balance:Je,compact:Ke,VerboseRegExp:We}=u;const et=new m({"support support-function-call support-function-call-css-builtin":{pattern:/(attr|counter|rgb|rgba|hsl|hsla|calc)(\()(.*)(\))/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}",captures:{2:"punctuation",3:()=>ct,4:"punctuation"}},"support support-function-call support-function-call-sass":{pattern:/(red|green|blue|mix|hue|saturation|lightness|adjust-hue|lighten|darken|saturate|desaturate|grayscale|complement|invert|alpha|opacity|opacify|transparentize|fade-in|fade-out|selector-(?:nest|replace)|unquote|quote|str-(?:length|insert|index|slice)|to-(?:upper|lower)-case|percentage|round|ceil|floor|abs|min|max|random|(?:feature|variable|global-variable|mixin)-exists|inspect|type-of|unit|unitless|comparable|call|if|unique-id)(\()(.*)(\))/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}",captures:{2:"punctuation",3:()=>ct,4:"punctuation"}},"support support-function-call support-function-call-url":{pattern:/(url)(\()(.*)(\))/,index:e=>Je(e,")","(",{startIndex:e.indexOf("(")}),replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}",before:(e,t)=>{let n=At.parse(e[3],t);/^('|")/.test(e[3])||(n=tt.parse(e[3],t),n="<span class='string string-unquoted'>".concat(n,"</span>")),e[3]=n}},"support support-function-call support-function-call-custom":{pattern:/([A-Za-z_-][A-Za-z0-9_-]*)(\()(.*)(\))/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}",captures:{2:"punctuation",3:()=>ct,4:"punctuation"}}}),tt=new m({interpolation:{pattern:/(\#\{)(.*?)(})/,captures:{1:"punctuation interpolation-begin",2:()=>ct,3:"punctuation interpolation-end"},wrapReplacement:!0}});function nt(e){return new m({[e]:{pattern:/\$[A-Za-z0-9_-]+/}})}const at=nt("variable"),rt=new m({"variable variable-assignment":{pattern:/(\s*)(\$[A-Za-z][A-Za-z0-9_-]*)\b(\s*)(\:)([\s\S]*?)(;)/,captures:{2:"variable variable-assignment",4:"punctuation",5:()=>ct}}}).extend(at),st=new m({"parameter parameter-with-default":{pattern:/(\$[A-Za-z][A-Za-z0-9_-]*)(\s*:\s*)(.*?)(?=,|\)|\n)/,replacement:Ke('\n      <span class="parameter">\n        #{1}#{2}#{3}\n      </span>\n    '),captures:{1:"variable",2:"punctuation",3:()=>ct}}}).extend(nt("variable parameter")),pt=new m({"selector selector-class selector-abstract-class":{pattern:/(%)[a-zA-Z0-9_-]+/},"selector selector-element-wildcard":{pattern:/\*/},"selector selector-element":{pattern:/\b(a|abbr|acronym|address|area|article|aside|applet|audio|b|base|bdo|big|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|keygen|kbd|label|legend|li|link|main|map|mark|menu|meta|meter|nav|noscript|object|ol|optgroup|option|output|p|param|picture|pre|progress|q|rp|rt|ruby|s|samp|script|section|select|small|source|span|strike|strong|style|sub|summary|sup|svg|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|u|ul|var|video)\b/},"selector selector-class":{pattern:/\.[a-zA-Z][a-zA-Z0-9_\-]*\b/},"selector selector-id":{pattern:/#[a-zA-Z][a-zA-Z0-9_-]*/},"selector selector-pseudo selector-pseudo-not":{pattern:/(:not\()(.*)(\))/,replacement:Ke("\n      <span class='#{name}'>\n        #{1}\n        <span class='parameter'>#{2}</span>\n        #{3}\n      </span>\n    "),captures:{2:()=>pt}},"selector selector-self-reference-bem-style":{pattern:/(?:&amp;|&)(?:__|--)(?:[A-Za-z0-9_-]+)?/},"selector selector-interpolation":{pattern:/(#\{)(.*)(\})/,index:e=>Je(e,"}","{",{startIndex:e.indexOf("{")}),wrapReplacement:!0,captures:{2:()=>ct}},"selector selector-self-reference":{pattern:/(?:&amp;|&)/},"selector selector-pseudo selector-pseudo-with-args":{pattern:/((?:\:+)\b(?:lang|nth-(?:last-)?child|nth-(?:last-)?of-type))(\()(.*)(\))/,wrapReplacement:!0,captures:{3:()=>ct}},"selector selector-pseudo selector-pseudo-without-args":{pattern:/(:{1,2})(link|visited|hover|active|focus|targetdisabled|enabled|checked|indeterminate|root|first-child|last-child|first-of-type|last-of-type|only-child|only-of-type|empty|valid|invalid)/},"selector selector-pseudo selector-pseudo-element":{pattern:/(:{1,2})(-(?:webkit|moz|ms)-)?\b(after|before|first-letter|first-line|selection|any-link|local-link|(?:input-)?placeholder|focus-inner|matches|nth-match|column|nth-column)\b/},"selector selector-attribute":{pattern:/(\[)([A-Za-z_-][A-Za-z0-9_-]*)(?:([~\.$^]?=)((['"])(?:.*?)(?:\5)|[^\s\]]))?(\])/,wrapReplacement:!0,captures:{4:()=>dt}},"selector selector-combinator":{pattern:/(\s*)([>+~])(\s*)/,replacement:"#{1}<span class='#{name}'>#{2}</span>#{3}"}}),ot=new m({"meta: map pair":{pattern:/([a-zA-Z_-][a-zA-Z0-9_-]*)(\s*:\s*)(.*(?:,|\)|$))/,captures:{1:"entity",2:"punctuation",3:()=>ct}}}),it=new m({"operator operator-logical":{pattern:/\b(and|or|not)\b/}}),lt=new m({"operator operator-arithmetic":{pattern:/\*|\+|\-(?=\s|\(|\d|$)|\//},"operator operator-comparison":{pattern:/!=|==|</}}).extend(it),ct=new m({"meta: possible map":{pattern:/(\()([\s\S]+)(\))/,replacement:"#{1}#{2}#{3}",before:(e,t)=>{let n=ct;/[A-Za-z_-][A-Za-z0-9_-]*:.*(?:,|\)|$)/.test(e[2])&&(n=ot),e[2]=n.parse(e[2],t)}},"constant constant-boolean":{pattern:/\b(?:true|false)\b/},constant:{pattern:/\b(?:null)\b/},"support support-property-value":{pattern:/inherit|initial|unset|none|auto|inline-block|block|inline|absolute|relative|solid|dotted|dashed|nowrap|normal|bold|italic|underline|overline|double|uppercase|lowercase|(?:border|content)-box/},"meta: value with unit":{pattern:/([\+|\-]?(?:\s*)?(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+))(\s*)((?:ch|cm|deg|dpi|dpcm|dppx|em|ex|grad|in|mm|ms|pc|pt|px|rad|rem|turn|s|vh|vmin|vw)\b|%)/,captures:{1:"number",3:"unit"}}}).extend(lt,at),ut=new m({number:{pattern:/[\+|\-]?(\s*)?([0-9]+(\.[0-9]+)?|\.[0-9]+)/}}),dt=new m({"string single-quoted":{pattern:/(')([^']*?)(')/,wrapReplacement:!0,captures:{2:tt}},"string double-quoted":{pattern:/(")(.*?[^\\])(")/,wrapReplacement:!0,captures:{2:tt}},"string single-quoted string-empty":{pattern:/''/},"string double-quoted string-empty":{pattern:/""/}}),mt=new m({"constant color-hex":{pattern:/#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\b/},"constant color-named":{pattern:/\b(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)\b/}}),gt=new m({"keyword directive":{pattern:/\s+!(?:default|important|optional)/}});ct.extend(et,dt,mt,ut,gt,{support:{pattern:/\b([\w-]+)\b/}});const bt=new m({"comment comment-line":{pattern:/(?:\s*)\/\/(?:.*?)(?=\n)/},"comment comment-block":{pattern:/(?:\s*)(\/\*)([\s\S]*)(\*\/)/}}),wt=new m({"meta: property pair":{pattern:/([\-a-z]+)(\s*:\s*)([^;]+)(;)/,captures:{1:"property",3:()=>ct}}}),ft=new m({support:{pattern:/\b(?:only|screen)\b/},"meta: property group":{pattern:/(\()(.*)(\))/,replacement:"#{1}#{2}#{3}",captures:{2:()=>vt}}}).extend(it),ht=new m({}).extend(et,lt,ct),yt=new m({}).extend(st,ct,{"string string-unquoted":{pattern:/\b\w+\b/}}),xt=new m({"meta: from/to":{pattern:/\b(from|to)\b(\s*)(?={)/,captures:{1:"keyword"}},"meta: percentage":{pattern:/(\d+%)(\s*)(?={)/,captures:{1:()=>ct}}}).extend(wt),kt=new m({"meta: property pair":{pattern:/([\-a-z]+)(\s*:\s*)([^;]+)(?=\)|$)/,replacement:'<span class="property">#{1}</span>#{2}#{3}#{4}',captures:{1:"property",2:"punctuation",3:()=>ct}}}).extend(it),vt=new m({"meta: property pair":{pattern:/([\-a-z]+)(\s*:\s*)([^;]+)(?=\)|$)/,captures:{1:"property",3:()=>ct}}}),At=new m({}).extend(dt,rt,et),_t=new m({"meta: at-rule":{pattern:/(@(?:elseif|if|else))(.*)({)/,captures:{1:"keyword keyword-at-rule keyword-at-rule-if",2:ht}},"keyword keyword-at-rule keyword-at-rule-keyframes":{pattern:/(@keyframes)(\s+)([a-z-]+)(\s*)({)([\s\S]*)(})/,index:e=>Je(e,"}","{",{startIndex:e.indexOf("{")}),captures:{1:"keyword keyword-at-rule keyword-at-rule-keyframes",3:"entity",6:xt}},"keyword keyword-at-rule keyword-at-rule-log-directive":{pattern:/(@(?:error|warn|debug))(\s+|\()(.*)(\)?;)(\s*)(?=\n)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}#{5}",captures:{3:dt}},"keyword keyword-at-rule keyword-at-rule-each":{pattern:/(@each)(.*)\b(in)\b(.*)(\{)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}#{5}",captures:{2:()=>rt,3:"keyword",4:()=>ct}},"keyword keyword-at-rule keyword-at-rule-for":{pattern:/(@for)(.*)\b(from)\b(.*)(through)(.*)({)/,replacement:Ke("\n      <span class='#{name}'>#{1}</span>\n      #{2}#{3}#{4}#{5}#{6}#{7}\n    "),captures:{2:()=>rt,3:"keyword",4:()=>ct,5:"keyword",6:()=>ct}},"keyword keyword-at-rule keyword-at-rule-mixin":{pattern:/(@mixin)(\s+)([A-Za-z-][A-Za-z0-9\-_]+)(?:(\s*\())?(.*)(?={)/,replacement:Ke("\n      <span class='#{name}'>#{1}</span>#{2}#{3}#{4}#{5}\n    "),captures:{3:"function",5:st}},"keyword keyword-at-rule keyword-at-rule-function":{pattern:/(@function)(\s+)([A-Za-z-][A-Za-z0-9\-_]+)(?:(\s*\())?(.*)(?={)/,replacement:Ke("\n      <span class='#{name}'>#{1}</span>\n      #{2}#{3}#{4}#{5}\n    "),captures:{3:"function",5:st}},"keyword keyword-at-rule keyword-at-rule-extend":{pattern:/(@extend)(\s+)(.*)(;)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}",before:(e,t)=>{e[3]=pt.parse(e[3],t),e[3]=e[3].replace(/(class=)(["'])(?:selector)\b/g,"$1$2entity parameter"),/!optional$/.test(e[3])&&(e[3]=e[3].replace(/(!optional)$/,"<span class='keyword keyword-directive'>$1</span>"))}},"keyword keyword-at-rule keyword-at-rule-include":{pattern:/(@include)(\s+)([A-Za-z][A-Za-z0-9\-_]+)(?:(\s*\())?([\s\S]*?)(;|\{)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}#{5}#{6}",captures:{3:"function",5:yt}},"keyword keyword-at-rule keyword-at-rule-media":{pattern:/(@media)(.*)({)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}",captures:{2:ft}},"keyword keyword-at-rule keyword-at-rule-import":{pattern:/(@import)(.*)(;)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}",captures:{2:dt}},"keyword keyword-at-rule keyword-at-rule-content":{pattern:/(@content)(?=;)/},"keyword keyword-at-rule keyword-at-rule-charset":{pattern:/(@charset)(\s+)(.*)(;)(\s*)(?=\n|$)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}#{5}",captures:{3:dt}},"keyword keyword-at-rule keyword-at-rule-namespace":{pattern:/(@namespace)(\s+)(?:([a-zA-Z][a-zA-Z0-9]+)(\s+))?([^\s]*)(;)(?=\n|$)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}#{5}#{6}",captures:{3:"selector",5:et},before:(e,t)=>{e[3]||(e[4]="")}},"keyword keyword-at-rule keyword-at-rule-supports":{pattern:/(@supports)(\s+)(.*)({)(\s*)(?=\n)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}#{5}",captures:{3:kt}},"keyword keyword-at-rule keyword-at-rule-font-face":{pattern:/(@font-face)(\s*)({)(\s*)(?=\n)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}"},"keyword keyword-at-rule keyword-at-rule-return":{pattern:/(@return)(\s+)(.*)(;)/,replacement:"<span class='#{name}'>#{1}</span>#{2}#{3}#{4}",captures:{3:()=>ct}}}),$t=new m("scss",{});$t.extend(et,rt,_t),$t.extend({"meta: selector line":{pattern:/(^\s*)((?:[>\+~]|\.|\#|\[|(?:&|&amp;)|%|\*|(?:a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|datalist|dd|del|details|dfn|dialog|div|dl|dt|em|eventsource|fieldset|figure|figcaption|footer|form|frame|frameset|(?:h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|label|legend|li|link|main|map|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|samp|script|section|select|small|span|strike|strong|style|sub|summary|sup|svg|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\b).*)(,|\{)/,index:e=>{return((e,t,n,a)=>{let r;for(let s=a;s<n.length;s++){let a=n.slice(s,s+e.length);if(r!==t&&a===e)return s;r=a.slice(-1)}})("{","#",e,0)},captures:{2:pt}}}),$t.extend(wt,bt);const zt=new m({variable:{pattern:/(\$[\d\w_\-]+)\b|(\$\{[\d\w_\-]+\})/}}),Zt=new m({variable:{pattern:/(\$[\w_\-]+)\b/}});new m("shell",{comment:{pattern:/#[^\n]*(?=\n|$)/},string:{pattern:/(?:'[^']*'|"[^"]*")/,before:(e,t)=>{e[0]=zt.parse(e[0],t)}},function:{pattern:/(\w[\w\d_\-]+)(?=\()/},"shell-command shell-command-backticks":{pattern:/`[^`]*`/,before:(e,t)=>{e[0]=Zt.parse(e[0],t)}},"shell-command":{pattern:/\$\(.*?\)/,before:(e,t)=>{e[0]=Zt.parse(e[0],t)}},"support support-builtin":{pattern:/\b(?:sudo|chmod|cd|mkdir|ls|cat|echo|touch|mv|cp|rm|ln|sed|awk|tr|xargs|yes|pbcopy|pbpaste)\b/},"support support-other":{pattern:/\b(?:ruby|gem|rake|python|pip|easy_install|node|npm|php|perl|bash|sh|zsh|gcc|go|mate|subl|atom)\b/},number:{pattern:/\b(?:[0-9]+(\.[0-9]+)?)\b/},constant:{pattern:/\b(?:false|true)\b/},"constant constant-home":{pattern:/(^|\s*|\n)~(?=\b|\/)/},keyword:{pattern:/\b(?:if|fi|case|esac|for|do|else|then|while|exit|done|shift)\b/},operator:{pattern:/>|&gt;|&&|&amp;&amp;/},variable:{pattern:/(\$[\w_\-]+)\b/},"variable-assignment":{pattern:/([A-Za-z_][A-Za-z0-9_]*)(=)/,replacement:"<span class='variable'>#{1}</span><span class='operator'>#{2}</span>"},"variable variable-in-braces":{pattern:/\$\{.+?}(?=\n|\b)/}},{alias:["bash"]});console.log("GRAMMARS:",m.debug()),onmessage=function(e){console.log("[worker] Message:",e);let{type:t}=e.data;switch(t){case"parse":{let{language:t,text:a,id:r}=e.data,s=m.find(t);if(!s)return n="No such grammar: ".concat(t),postMessage({error:n}),void console.error("No such grammar: ".concat(t));let p=s.parse(a);postMessage({id:r,language:t,source:p});break}}var n}});
